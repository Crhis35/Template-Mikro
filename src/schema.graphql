# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Access {
  createdAt: DateTime!
  deleteAt: DateTime
  device: Device!
  id: ID!
  owner: ID!
  tags: [Tag!]!
  token: String!
  updatedAt: DateTime!
}

input ApiArgs {
  filter: String
  limit: Float = 10
  offset: Float = 0
  search: String = ""
  sort: SortBy
}

type AuthAndToken {
  auth: AuthProvider!
  token: String!
}

input AuthInput {
  email: String!
  password: String
  provider: Provider
  role: [Role!]
  userName: String!
}

input AuthInputLogin {
  email: String!
  password: String!
}

type AuthProvider {
  companies: [Company!]
  conversations: [Conversation!]
  createdAt: DateTime!
  devices: [Device!]
  email: String!
  from: [Message!]
  id: ID!
  isBlocked: Boolean!
  isReported: Boolean!
  owner: ID!
  participants: [Participant!]
  password: String
  passwordChangedAt: DateTime!
  passwordResetExpires: DateTime!
  provider: Provider!
  reports: [Report!]
  role: [Role!]!
  tags: [Tag!]!
  to: [Message!]
  updatedAt: DateTime!
  userName: String!
  verified: Boolean!
  verifiedCode: Int!
}

type Company {
  auths: [AuthProvider!]!
  createdAt: DateTime!
  id: ID!
  myPlan: MyPlan
  name: String!
  owner: ID!
  picture: String
  tags: [Tag!]!
  taxId: Int!
  updatedAt: DateTime!
}

type Conversation {
  createdAt: DateTime!
  deleteAt: DateTime
  id: ID!
  messages: [Message!]
  owner: ID!
  participant: [Participant!]
  tags: [Tag!]!
  title: String!
  updatedAt: DateTime!
  users: [AuthProvider!]
}

"""Roles in a conversation"""
enum ConversationRole {
  MEMBER
  MODERATOR
  OWNER
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Device {
  access: Access
  brand: DeviceBrands!
  createdAt: DateTime!
  id: ID!
  owner: ID!
  tags: [Tag!]!
  updatedAt: DateTime!
  user: AuthProvider!
}

"""Device Brands"""
enum DeviceBrands {
  APPLE
  BLACKBERRY
  HUAWEI
  NOKIA
  SAMSUNG
  XIAOMI
}

type Message {
  attachment: [String!]
  createdAt: DateTime!
  deleteAt: DateTime
  id: ID!
  owner: ID!
  tags: [Tag!]!
  text: String!
  updatedAt: DateTime!
}

type Mutation {
  createCompany(input: UserInput!): AuthProvider!
  signIn(input: AuthInput!): AuthAndToken!
  updateCompany(image: Upload, input: UserInput): Company!
  verified(code: Int!): AuthProvider!
}

type MyPlan {
  active: Boolean!
  createdAt: DateTime!
  endDate: DateTime!
  id: ID!
  initDate: DateTime!
  owner: ID!
  tags: [Tag!]!
  type: Plan!
  updatedAt: DateTime!
  user: Company!
}

enum Order {
  Asc
  Desc
}

type PaginatedAuthProviderResponse {
  items: [AuthProvider!]!
  offset: Int!
  totalPages: Int!
}

type PaginatedCompanyResponse {
  items: [Company!]!
  offset: Int!
  totalPages: Int!
}

type PaginatedMessage {
  items: [Message!]!
  offset: Int!
  totalPages: Int!
}

type Participant {
  conversation: Conversation!
  createdAt: DateTime!
  id: ID!
  owner: ID!
  reports: [Report!]
  tags: [Tag!]!
  type: ConversationRole!
  updatedAt: DateTime!
  user: AuthProvider!
}

type Plan {
  createdAt: DateTime!
  description: String!
  id: ID!
  owner: ID!
  plans: [MyPlan!]
  price: Float!
  tags: [Tag!]!
  updatedAt: DateTime!
}

"""Gmail auth or email"""
enum Provider {
  EMAIL
  GMAIL
}

type Query {
  getAuthProvider(id: String!): AuthProvider!
  getCompany(id: String!): Company!
  listAllAuthProviders(args: ApiArgs = {filter: "", limit: 10, offset: 0, search: "", sort: null}): PaginatedAuthProviderResponse
  listAllCompanys(args: ApiArgs = {filter: "", limit: 10, offset: 0, search: "", sort: null}): PaginatedCompanyResponse
  listAllMessages(args: ApiArgs = {filter: "", limit: 10, offset: 0, search: "", sort: null}): PaginatedMessage
  login(input: AuthInputLogin!): AuthAndToken
  me: AuthProvider!
}

type Report {
  createdAt: DateTime!
  id: ID!
  owner: ID!
  participant: Participant!
  reportType: String!
  tags: [Tag!]!
  text: String!
  updatedAt: DateTime!
  user: AuthProvider!
}

"""Roles of the user"""
enum Role {
  ADMIN
  OWNER
  USER
}

input SortBy {
  field: String!
  order: Order!
}

type Tag {
  subject: String!
  value: String!
}

input TagInput {
  subject: String!
  value: String!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UserInput {
  id: String
  name: String
  picture: String
  tags: [TagInput!]
  taxId: Int
}
